package ca.a4p2v2.controller;

/*** The purpose of this class is to make Get and Post Requests to the backend of the REST API.
 * It stores a list of games and boards, which it can navigate to retrieve and GET from or POST to.
 * This class can create a fully-instantiated Game, Board, and Location wrapper class.
 * It also handles different kinds of errors that are generated by the index.html page.
 * Game states are determined by accessing the various lists using a matching game number,
 * which extends all the way to the backend GameLogic (model).
 *
 * Update** Fixed cross-pasting of moves across tabs and refactored/improved code.
 */

import ca.a4p2v2.api.ApiBoardWrapper;
import ca.a4p2v2.api.ApiGameWrapper;
import ca.a4p2v2.api.ApiLocationWrapper;
import ca.a4p2v2.model.GameLogic;
import ca.a4p2v2.model.Grid;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import java.util.ArrayList;
import static ca.a4p2v2.api.ApiGameWrapper.setModel;

@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})

@RestController
@RequestMapping("/api")
public class SpringRestController {
    public static ArrayList<ApiGameWrapper> games = new ArrayList<>();
    public static ArrayList<ApiBoardWrapper> boards = new ArrayList<>();

    @GetMapping ("/about")
    public String about(){
        System.out.println("Sasha Vujisic");
        return "Sasha Vujisic";
    }

    @GetMapping("/games")
    public ArrayList<ApiGameWrapper> getGames(){
        System.out.println("Returning all games.");
        return games;
    }

    @GetMapping("/games/{id}")
    public ApiGameWrapper getGameID(@PathVariable("id") int gameNumber) throws IllegalAccessException {
        if (gameNumber < 0 || gameNumber > games.size() || games.size() == 0) {
            throw new IllegalAccessException();
        } else {
            System.out.println("Returning game number: " + gameNumber);
            return games.get(gameNumber);
        }
    }

    @GetMapping("/games/{id}/board")
    public ApiBoardWrapper getBoard(@PathVariable("id") int gameNumber) throws IllegalAccessException {
        if (gameNumber < 0 || gameNumber > games.size() || games.size() == 0) {
            throw new IllegalAccessException();
        } else {
            ApiBoardWrapper board = boards.get(gameNumber);
            board.updateBoard();
            return board;
        }
    }

    @PostMapping("/games")
    @ResponseStatus(HttpStatus.CREATED)
    public ApiGameWrapper createGame() {
        int newGameID = games.size();
        Grid grid = new Grid();
        GameLogic model = new GameLogic(5, grid);
        games.add(new ApiGameWrapper(newGameID, false,false, model));
        boards.add(new ApiBoardWrapper(newGameID, 10));
        System.out.println("Creating game instance: " + newGameID);
        return games.get(newGameID);
    }

    @PostMapping("/games/{id}/moves")
    public void setLocation(@PathVariable("id") int gameNumber,
                            @RequestBody ApiLocationWrapper boardLocation
    ) throws IllegalAccessException {
        if (gameNumber < 0 || gameNumber > games.size() || games.size() == 0) {
            throw new IllegalAccessException();
        }
        else if (boardLocation.getRow() > 9 || boardLocation.getCol() > 9 || boardLocation.getRow() < 0 || boardLocation.getCol() < 0) {
            throw new IllegalArgumentException();
        } else {
            setModel(gameNumber);
            ApiGameWrapper game = games.get(gameNumber);
            game.turn(new ApiLocationWrapper(boardLocation.getRow(), boardLocation.getCol()).getCoords());
            System.out.println("Executing new user turn.");
        }

    }

    @PostMapping("/games/{id}/cheatstate")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public void getCheat(@PathVariable("id") int gameNumber,
                         @RequestBody String input
    ) throws IllegalAccessException {
        if (gameNumber < 0 || gameNumber > games.size() || games.size() == 0) {
            throw new IllegalAccessException();
        }
        if (!"SHOW_ALL".equals(input)){
            throw new IllegalArgumentException();
        }
        else {
            games.get(gameNumber).setCheat(true);
            System.out.println("Cheat mode activated.");
        }
    }

    @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "Bad request for some move or cheat (Enter a valid request)")
    @ExceptionHandler(IllegalArgumentException.class)
    public void badArg() {
        System.err.println("Bad request for some move or cheat (Enter a valid request)");
    }

    @ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "Game number not found (Enter a valid game number)")
    @ExceptionHandler(IllegalAccessException.class)
    public void badId() {
        System.err.println("Game number not found (Enter a valid game number)");
    }

    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR, reason = "Internal server malfunction")
    @ExceptionHandler(IllegalStateException.class)
    public void badServer() {
        System.err.println("Internal server malfunction");
    }

    @ResponseStatus(value = HttpStatus.I_AM_A_TEAPOT, reason = "Tea time interrupted by tank invasion.")
    @ExceptionHandler(IllegalStateException.class)
    public void badTea() {
        System.err.println("Tea time interrupted by tank invasion.");
    }
}